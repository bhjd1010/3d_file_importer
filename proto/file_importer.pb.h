// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_importer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_5fimporter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_5fimporter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_5fimporter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_5fimporter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_5fimporter_2eproto;
namespace file_importer {
class ImportFileRequest;
struct ImportFileRequestDefaultTypeInternal;
extern ImportFileRequestDefaultTypeInternal _ImportFileRequest_default_instance_;
class ImportFileResponse;
struct ImportFileResponseDefaultTypeInternal;
extern ImportFileResponseDefaultTypeInternal _ImportFileResponse_default_instance_;
class MeshData;
struct MeshDataDefaultTypeInternal;
extern MeshDataDefaultTypeInternal _MeshData_default_instance_;
class Pt2d;
struct Pt2dDefaultTypeInternal;
extern Pt2dDefaultTypeInternal _Pt2d_default_instance_;
class Pt3d;
struct Pt3dDefaultTypeInternal;
extern Pt3dDefaultTypeInternal _Pt3d_default_instance_;
}  // namespace file_importer
PROTOBUF_NAMESPACE_OPEN
template<> ::file_importer::ImportFileRequest* Arena::CreateMaybeMessage<::file_importer::ImportFileRequest>(Arena*);
template<> ::file_importer::ImportFileResponse* Arena::CreateMaybeMessage<::file_importer::ImportFileResponse>(Arena*);
template<> ::file_importer::MeshData* Arena::CreateMaybeMessage<::file_importer::MeshData>(Arena*);
template<> ::file_importer::Pt2d* Arena::CreateMaybeMessage<::file_importer::Pt2d>(Arena*);
template<> ::file_importer::Pt3d* Arena::CreateMaybeMessage<::file_importer::Pt3d>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace file_importer {

// ===================================================================

class Pt3d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file_importer.Pt3d) */ {
 public:
  inline Pt3d() : Pt3d(nullptr) {}
  ~Pt3d() override;
  explicit PROTOBUF_CONSTEXPR Pt3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pt3d(const Pt3d& from);
  Pt3d(Pt3d&& from) noexcept
    : Pt3d() {
    *this = ::std::move(from);
  }

  inline Pt3d& operator=(const Pt3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt3d& operator=(Pt3d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pt3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pt3d* internal_default_instance() {
    return reinterpret_cast<const Pt3d*>(
               &_Pt3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pt3d& a, Pt3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt3d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pt3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pt3d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pt3d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pt3d& from) {
    Pt3d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt3d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file_importer.Pt3d";
  }
  protected:
  explicit Pt3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:file_importer.Pt3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fimporter_2eproto;
};
// -------------------------------------------------------------------

class Pt2d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file_importer.Pt2d) */ {
 public:
  inline Pt2d() : Pt2d(nullptr) {}
  ~Pt2d() override;
  explicit PROTOBUF_CONSTEXPR Pt2d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pt2d(const Pt2d& from);
  Pt2d(Pt2d&& from) noexcept
    : Pt2d() {
    *this = ::std::move(from);
  }

  inline Pt2d& operator=(const Pt2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt2d& operator=(Pt2d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pt2d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pt2d* internal_default_instance() {
    return reinterpret_cast<const Pt2d*>(
               &_Pt2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pt2d& a, Pt2d& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt2d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt2d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pt2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pt2d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pt2d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pt2d& from) {
    Pt2d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt2d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file_importer.Pt2d";
  }
  protected:
  explicit Pt2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:file_importer.Pt2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fimporter_2eproto;
};
// -------------------------------------------------------------------

class ImportFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file_importer.ImportFileRequest) */ {
 public:
  inline ImportFileRequest() : ImportFileRequest(nullptr) {}
  ~ImportFileRequest() override;
  explicit PROTOBUF_CONSTEXPR ImportFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportFileRequest(const ImportFileRequest& from);
  ImportFileRequest(ImportFileRequest&& from) noexcept
    : ImportFileRequest() {
    *this = ::std::move(from);
  }

  inline ImportFileRequest& operator=(const ImportFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportFileRequest& operator=(ImportFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportFileRequest* internal_default_instance() {
    return reinterpret_cast<const ImportFileRequest*>(
               &_ImportFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ImportFileRequest& a, ImportFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportFileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportFileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportFileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportFileRequest& from) {
    ImportFileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportFileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file_importer.ImportFileRequest";
  }
  protected:
  explicit ImportFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
  };
  // string filePath = 1;
  void clear_filepath();
  const std::string& filepath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filepath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filepath();
  PROTOBUF_NODISCARD std::string* release_filepath();
  void set_allocated_filepath(std::string* filepath);
  private:
  const std::string& _internal_filepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filepath(const std::string& value);
  std::string* _internal_mutable_filepath();
  public:

  // @@protoc_insertion_point(class_scope:file_importer.ImportFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fimporter_2eproto;
};
// -------------------------------------------------------------------

class MeshData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file_importer.MeshData) */ {
 public:
  inline MeshData() : MeshData(nullptr) {}
  ~MeshData() override;
  explicit PROTOBUF_CONSTEXPR MeshData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeshData(const MeshData& from);
  MeshData(MeshData&& from) noexcept
    : MeshData() {
    *this = ::std::move(from);
  }

  inline MeshData& operator=(const MeshData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshData& operator=(MeshData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeshData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeshData* internal_default_instance() {
    return reinterpret_cast<const MeshData*>(
               &_MeshData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MeshData& a, MeshData& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeshData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MeshData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MeshData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MeshData& from) {
    MeshData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file_importer.MeshData";
  }
  protected:
  explicit MeshData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kIndicesFieldNumber = 2,
    kUvsFieldNumber = 3,
    kNormalsFieldNumber = 4,
  };
  // repeated .file_importer.Pt3d points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::file_importer::Pt3d* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::Pt3d >*
      mutable_points();
  private:
  const ::file_importer::Pt3d& _internal_points(int index) const;
  ::file_importer::Pt3d* _internal_add_points();
  public:
  const ::file_importer::Pt3d& points(int index) const;
  ::file_importer::Pt3d* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::Pt3d >&
      points() const;

  // repeated int32 indices = 2;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  int32_t _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_indices() const;
  void _internal_add_indices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_indices();
  public:
  int32_t indices(int index) const;
  void set_indices(int index, int32_t value);
  void add_indices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_indices();

  // repeated .file_importer.Pt2d uvs = 3;
  int uvs_size() const;
  private:
  int _internal_uvs_size() const;
  public:
  void clear_uvs();
  ::file_importer::Pt2d* mutable_uvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::Pt2d >*
      mutable_uvs();
  private:
  const ::file_importer::Pt2d& _internal_uvs(int index) const;
  ::file_importer::Pt2d* _internal_add_uvs();
  public:
  const ::file_importer::Pt2d& uvs(int index) const;
  ::file_importer::Pt2d* add_uvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::Pt2d >&
      uvs() const;

  // repeated .file_importer.Pt3d normals = 4;
  int normals_size() const;
  private:
  int _internal_normals_size() const;
  public:
  void clear_normals();
  ::file_importer::Pt3d* mutable_normals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::Pt3d >*
      mutable_normals();
  private:
  const ::file_importer::Pt3d& _internal_normals(int index) const;
  ::file_importer::Pt3d* _internal_add_normals();
  public:
  const ::file_importer::Pt3d& normals(int index) const;
  ::file_importer::Pt3d* add_normals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::Pt3d >&
      normals() const;

  // @@protoc_insertion_point(class_scope:file_importer.MeshData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::Pt3d > points_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > indices_;
    mutable std::atomic<int> _indices_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::Pt2d > uvs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::Pt3d > normals_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fimporter_2eproto;
};
// -------------------------------------------------------------------

class ImportFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file_importer.ImportFileResponse) */ {
 public:
  inline ImportFileResponse() : ImportFileResponse(nullptr) {}
  ~ImportFileResponse() override;
  explicit PROTOBUF_CONSTEXPR ImportFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportFileResponse(const ImportFileResponse& from);
  ImportFileResponse(ImportFileResponse&& from) noexcept
    : ImportFileResponse() {
    *this = ::std::move(from);
  }

  inline ImportFileResponse& operator=(const ImportFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportFileResponse& operator=(ImportFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportFileResponse* internal_default_instance() {
    return reinterpret_cast<const ImportFileResponse*>(
               &_ImportFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ImportFileResponse& a, ImportFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportFileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImportFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImportFileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImportFileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImportFileResponse& from) {
    ImportFileResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportFileResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file_importer.ImportFileResponse";
  }
  protected:
  explicit ImportFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeshDataArrFieldNumber = 1,
  };
  // repeated .file_importer.MeshData meshDataArr = 1;
  int meshdataarr_size() const;
  private:
  int _internal_meshdataarr_size() const;
  public:
  void clear_meshdataarr();
  ::file_importer::MeshData* mutable_meshdataarr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::MeshData >*
      mutable_meshdataarr();
  private:
  const ::file_importer::MeshData& _internal_meshdataarr(int index) const;
  ::file_importer::MeshData* _internal_add_meshdataarr();
  public:
  const ::file_importer::MeshData& meshdataarr(int index) const;
  ::file_importer::MeshData* add_meshdataarr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::MeshData >&
      meshdataarr() const;

  // @@protoc_insertion_point(class_scope:file_importer.ImportFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::MeshData > meshdataarr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fimporter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pt3d

// double x = 1;
inline void Pt3d::clear_x() {
  _impl_.x_ = 0;
}
inline double Pt3d::_internal_x() const {
  return _impl_.x_;
}
inline double Pt3d::x() const {
  // @@protoc_insertion_point(field_get:file_importer.Pt3d.x)
  return _internal_x();
}
inline void Pt3d::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Pt3d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:file_importer.Pt3d.x)
}

// double y = 2;
inline void Pt3d::clear_y() {
  _impl_.y_ = 0;
}
inline double Pt3d::_internal_y() const {
  return _impl_.y_;
}
inline double Pt3d::y() const {
  // @@protoc_insertion_point(field_get:file_importer.Pt3d.y)
  return _internal_y();
}
inline void Pt3d::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Pt3d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:file_importer.Pt3d.y)
}

// double z = 3;
inline void Pt3d::clear_z() {
  _impl_.z_ = 0;
}
inline double Pt3d::_internal_z() const {
  return _impl_.z_;
}
inline double Pt3d::z() const {
  // @@protoc_insertion_point(field_get:file_importer.Pt3d.z)
  return _internal_z();
}
inline void Pt3d::_internal_set_z(double value) {
  
  _impl_.z_ = value;
}
inline void Pt3d::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:file_importer.Pt3d.z)
}

// -------------------------------------------------------------------

// Pt2d

// double x = 1;
inline void Pt2d::clear_x() {
  _impl_.x_ = 0;
}
inline double Pt2d::_internal_x() const {
  return _impl_.x_;
}
inline double Pt2d::x() const {
  // @@protoc_insertion_point(field_get:file_importer.Pt2d.x)
  return _internal_x();
}
inline void Pt2d::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Pt2d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:file_importer.Pt2d.x)
}

// double y = 2;
inline void Pt2d::clear_y() {
  _impl_.y_ = 0;
}
inline double Pt2d::_internal_y() const {
  return _impl_.y_;
}
inline double Pt2d::y() const {
  // @@protoc_insertion_point(field_get:file_importer.Pt2d.y)
  return _internal_y();
}
inline void Pt2d::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Pt2d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:file_importer.Pt2d.y)
}

// -------------------------------------------------------------------

// ImportFileRequest

// string filePath = 1;
inline void ImportFileRequest::clear_filepath() {
  _impl_.filepath_.ClearToEmpty();
}
inline const std::string& ImportFileRequest::filepath() const {
  // @@protoc_insertion_point(field_get:file_importer.ImportFileRequest.filePath)
  return _internal_filepath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImportFileRequest::set_filepath(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filepath_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file_importer.ImportFileRequest.filePath)
}
inline std::string* ImportFileRequest::mutable_filepath() {
  std::string* _s = _internal_mutable_filepath();
  // @@protoc_insertion_point(field_mutable:file_importer.ImportFileRequest.filePath)
  return _s;
}
inline const std::string& ImportFileRequest::_internal_filepath() const {
  return _impl_.filepath_.Get();
}
inline void ImportFileRequest::_internal_set_filepath(const std::string& value) {
  
  _impl_.filepath_.Set(value, GetArenaForAllocation());
}
inline std::string* ImportFileRequest::_internal_mutable_filepath() {
  
  return _impl_.filepath_.Mutable(GetArenaForAllocation());
}
inline std::string* ImportFileRequest::release_filepath() {
  // @@protoc_insertion_point(field_release:file_importer.ImportFileRequest.filePath)
  return _impl_.filepath_.Release();
}
inline void ImportFileRequest::set_allocated_filepath(std::string* filepath) {
  if (filepath != nullptr) {
    
  } else {
    
  }
  _impl_.filepath_.SetAllocated(filepath, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filepath_.IsDefault()) {
    _impl_.filepath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file_importer.ImportFileRequest.filePath)
}

// -------------------------------------------------------------------

// MeshData

// repeated .file_importer.Pt3d points = 1;
inline int MeshData::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int MeshData::points_size() const {
  return _internal_points_size();
}
inline void MeshData::clear_points() {
  _impl_.points_.Clear();
}
inline ::file_importer::Pt3d* MeshData::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:file_importer.MeshData.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::Pt3d >*
MeshData::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:file_importer.MeshData.points)
  return &_impl_.points_;
}
inline const ::file_importer::Pt3d& MeshData::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::file_importer::Pt3d& MeshData::points(int index) const {
  // @@protoc_insertion_point(field_get:file_importer.MeshData.points)
  return _internal_points(index);
}
inline ::file_importer::Pt3d* MeshData::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::file_importer::Pt3d* MeshData::add_points() {
  ::file_importer::Pt3d* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:file_importer.MeshData.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::Pt3d >&
MeshData::points() const {
  // @@protoc_insertion_point(field_list:file_importer.MeshData.points)
  return _impl_.points_;
}

// repeated int32 indices = 2;
inline int MeshData::_internal_indices_size() const {
  return _impl_.indices_.size();
}
inline int MeshData::indices_size() const {
  return _internal_indices_size();
}
inline void MeshData::clear_indices() {
  _impl_.indices_.Clear();
}
inline int32_t MeshData::_internal_indices(int index) const {
  return _impl_.indices_.Get(index);
}
inline int32_t MeshData::indices(int index) const {
  // @@protoc_insertion_point(field_get:file_importer.MeshData.indices)
  return _internal_indices(index);
}
inline void MeshData::set_indices(int index, int32_t value) {
  _impl_.indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:file_importer.MeshData.indices)
}
inline void MeshData::_internal_add_indices(int32_t value) {
  _impl_.indices_.Add(value);
}
inline void MeshData::add_indices(int32_t value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:file_importer.MeshData.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MeshData::_internal_indices() const {
  return _impl_.indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MeshData::indices() const {
  // @@protoc_insertion_point(field_list:file_importer.MeshData.indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MeshData::_internal_mutable_indices() {
  return &_impl_.indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MeshData::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:file_importer.MeshData.indices)
  return _internal_mutable_indices();
}

// repeated .file_importer.Pt2d uvs = 3;
inline int MeshData::_internal_uvs_size() const {
  return _impl_.uvs_.size();
}
inline int MeshData::uvs_size() const {
  return _internal_uvs_size();
}
inline void MeshData::clear_uvs() {
  _impl_.uvs_.Clear();
}
inline ::file_importer::Pt2d* MeshData::mutable_uvs(int index) {
  // @@protoc_insertion_point(field_mutable:file_importer.MeshData.uvs)
  return _impl_.uvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::Pt2d >*
MeshData::mutable_uvs() {
  // @@protoc_insertion_point(field_mutable_list:file_importer.MeshData.uvs)
  return &_impl_.uvs_;
}
inline const ::file_importer::Pt2d& MeshData::_internal_uvs(int index) const {
  return _impl_.uvs_.Get(index);
}
inline const ::file_importer::Pt2d& MeshData::uvs(int index) const {
  // @@protoc_insertion_point(field_get:file_importer.MeshData.uvs)
  return _internal_uvs(index);
}
inline ::file_importer::Pt2d* MeshData::_internal_add_uvs() {
  return _impl_.uvs_.Add();
}
inline ::file_importer::Pt2d* MeshData::add_uvs() {
  ::file_importer::Pt2d* _add = _internal_add_uvs();
  // @@protoc_insertion_point(field_add:file_importer.MeshData.uvs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::Pt2d >&
MeshData::uvs() const {
  // @@protoc_insertion_point(field_list:file_importer.MeshData.uvs)
  return _impl_.uvs_;
}

// repeated .file_importer.Pt3d normals = 4;
inline int MeshData::_internal_normals_size() const {
  return _impl_.normals_.size();
}
inline int MeshData::normals_size() const {
  return _internal_normals_size();
}
inline void MeshData::clear_normals() {
  _impl_.normals_.Clear();
}
inline ::file_importer::Pt3d* MeshData::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:file_importer.MeshData.normals)
  return _impl_.normals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::Pt3d >*
MeshData::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:file_importer.MeshData.normals)
  return &_impl_.normals_;
}
inline const ::file_importer::Pt3d& MeshData::_internal_normals(int index) const {
  return _impl_.normals_.Get(index);
}
inline const ::file_importer::Pt3d& MeshData::normals(int index) const {
  // @@protoc_insertion_point(field_get:file_importer.MeshData.normals)
  return _internal_normals(index);
}
inline ::file_importer::Pt3d* MeshData::_internal_add_normals() {
  return _impl_.normals_.Add();
}
inline ::file_importer::Pt3d* MeshData::add_normals() {
  ::file_importer::Pt3d* _add = _internal_add_normals();
  // @@protoc_insertion_point(field_add:file_importer.MeshData.normals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::Pt3d >&
MeshData::normals() const {
  // @@protoc_insertion_point(field_list:file_importer.MeshData.normals)
  return _impl_.normals_;
}

// -------------------------------------------------------------------

// ImportFileResponse

// repeated .file_importer.MeshData meshDataArr = 1;
inline int ImportFileResponse::_internal_meshdataarr_size() const {
  return _impl_.meshdataarr_.size();
}
inline int ImportFileResponse::meshdataarr_size() const {
  return _internal_meshdataarr_size();
}
inline void ImportFileResponse::clear_meshdataarr() {
  _impl_.meshdataarr_.Clear();
}
inline ::file_importer::MeshData* ImportFileResponse::mutable_meshdataarr(int index) {
  // @@protoc_insertion_point(field_mutable:file_importer.ImportFileResponse.meshDataArr)
  return _impl_.meshdataarr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::MeshData >*
ImportFileResponse::mutable_meshdataarr() {
  // @@protoc_insertion_point(field_mutable_list:file_importer.ImportFileResponse.meshDataArr)
  return &_impl_.meshdataarr_;
}
inline const ::file_importer::MeshData& ImportFileResponse::_internal_meshdataarr(int index) const {
  return _impl_.meshdataarr_.Get(index);
}
inline const ::file_importer::MeshData& ImportFileResponse::meshdataarr(int index) const {
  // @@protoc_insertion_point(field_get:file_importer.ImportFileResponse.meshDataArr)
  return _internal_meshdataarr(index);
}
inline ::file_importer::MeshData* ImportFileResponse::_internal_add_meshdataarr() {
  return _impl_.meshdataarr_.Add();
}
inline ::file_importer::MeshData* ImportFileResponse::add_meshdataarr() {
  ::file_importer::MeshData* _add = _internal_add_meshdataarr();
  // @@protoc_insertion_point(field_add:file_importer.ImportFileResponse.meshDataArr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file_importer::MeshData >&
ImportFileResponse::meshdataarr() const {
  // @@protoc_insertion_point(field_list:file_importer.ImportFileResponse.meshDataArr)
  return _impl_.meshdataarr_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace file_importer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_5fimporter_2eproto
