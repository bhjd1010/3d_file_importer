// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_importer.proto

#include "file_importer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace file_importer {
PROTOBUF_CONSTEXPR Pt3d::Pt3d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Pt3dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Pt3dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Pt3dDefaultTypeInternal() {}
  union {
    Pt3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Pt3dDefaultTypeInternal _Pt3d_default_instance_;
PROTOBUF_CONSTEXPR Pt2d::Pt2d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Pt2dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Pt2dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Pt2dDefaultTypeInternal() {}
  union {
    Pt2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Pt2dDefaultTypeInternal _Pt2d_default_instance_;
PROTOBUF_CONSTEXPR ImportFileRequest::ImportFileRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImportFileRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImportFileRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImportFileRequestDefaultTypeInternal() {}
  union {
    ImportFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImportFileRequestDefaultTypeInternal _ImportFileRequest_default_instance_;
PROTOBUF_CONSTEXPR MeshData::MeshData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_.indices_)*/{}
  , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.uvs_)*/{}
  , /*decltype(_impl_.normals_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MeshDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshDataDefaultTypeInternal() {}
  union {
    MeshData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshDataDefaultTypeInternal _MeshData_default_instance_;
PROTOBUF_CONSTEXPR ImportFileResponse::ImportFileResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.meshdataarr_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImportFileResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImportFileResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImportFileResponseDefaultTypeInternal() {}
  union {
    ImportFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImportFileResponseDefaultTypeInternal _ImportFileResponse_default_instance_;
}  // namespace file_importer
static ::_pb::Metadata file_level_metadata_file_5fimporter_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_file_5fimporter_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_file_5fimporter_2eproto = nullptr;

const uint32_t TableStruct_file_5fimporter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::file_importer::Pt3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::file_importer::Pt3d, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::file_importer::Pt3d, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::file_importer::Pt3d, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::file_importer::Pt2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::file_importer::Pt2d, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::file_importer::Pt2d, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::file_importer::ImportFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::file_importer::ImportFileRequest, _impl_.filepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::file_importer::MeshData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::file_importer::MeshData, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::file_importer::MeshData, _impl_.indices_),
  PROTOBUF_FIELD_OFFSET(::file_importer::MeshData, _impl_.uvs_),
  PROTOBUF_FIELD_OFFSET(::file_importer::MeshData, _impl_.normals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::file_importer::ImportFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::file_importer::ImportFileResponse, _impl_.meshdataarr_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::file_importer::Pt3d)},
  { 9, -1, -1, sizeof(::file_importer::Pt2d)},
  { 17, -1, -1, sizeof(::file_importer::ImportFileRequest)},
  { 24, -1, -1, sizeof(::file_importer::MeshData)},
  { 34, -1, -1, sizeof(::file_importer::ImportFileResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::file_importer::_Pt3d_default_instance_._instance,
  &::file_importer::_Pt2d_default_instance_._instance,
  &::file_importer::_ImportFileRequest_default_instance_._instance,
  &::file_importer::_MeshData_default_instance_._instance,
  &::file_importer::_ImportFileResponse_default_instance_._instance,
};

const char descriptor_table_protodef_file_5fimporter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023file_importer.proto\022\rfile_importer\"\'\n\004"
  "Pt3d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\034\n"
  "\004Pt2d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"%\n\021ImportFil"
  "eRequest\022\020\n\010filePath\030\001 \001(\t\"\210\001\n\010MeshData\022"
  "#\n\006points\030\001 \003(\0132\023.file_importer.Pt3d\022\017\n\007"
  "indices\030\002 \003(\005\022 \n\003uvs\030\003 \003(\0132\023.file_import"
  "er.Pt2d\022$\n\007normals\030\004 \003(\0132\023.file_importer"
  ".Pt3d\"B\n\022ImportFileResponse\022,\n\013meshDataA"
  "rr\030\001 \003(\0132\027.file_importer.MeshData2e\n\014Fil"
  "eImporter\022U\n\014Import3dFile\022 .file_importe"
  "r.ImportFileRequest\032!.file_importer.Impo"
  "rtFileResponse\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_file_5fimporter_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_file_5fimporter_2eproto = {
    false, false, 464, descriptor_table_protodef_file_5fimporter_2eproto,
    "file_importer.proto",
    &descriptor_table_file_5fimporter_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_file_5fimporter_2eproto::offsets,
    file_level_metadata_file_5fimporter_2eproto, file_level_enum_descriptors_file_5fimporter_2eproto,
    file_level_service_descriptors_file_5fimporter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_file_5fimporter_2eproto_getter() {
  return &descriptor_table_file_5fimporter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_file_5fimporter_2eproto(&descriptor_table_file_5fimporter_2eproto);
namespace file_importer {

// ===================================================================

class Pt3d::_Internal {
 public:
};

Pt3d::Pt3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:file_importer.Pt3d)
}
Pt3d::Pt3d(const Pt3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pt3d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:file_importer.Pt3d)
}

inline void Pt3d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pt3d::~Pt3d() {
  // @@protoc_insertion_point(destructor:file_importer.Pt3d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pt3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pt3d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pt3d::Clear() {
// @@protoc_insertion_point(message_clear_start:file_importer.Pt3d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pt3d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pt3d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:file_importer.Pt3d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:file_importer.Pt3d)
  return target;
}

size_t Pt3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:file_importer.Pt3d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pt3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pt3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pt3d::GetClassData() const { return &_class_data_; }


void Pt3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pt3d*>(&to_msg);
  auto& from = static_cast<const Pt3d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:file_importer.Pt3d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pt3d::CopyFrom(const Pt3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:file_importer.Pt3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pt3d::IsInitialized() const {
  return true;
}

void Pt3d::InternalSwap(Pt3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pt3d, _impl_.z_)
      + sizeof(Pt3d::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Pt3d, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pt3d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_5fimporter_2eproto_getter, &descriptor_table_file_5fimporter_2eproto_once,
      file_level_metadata_file_5fimporter_2eproto[0]);
}

// ===================================================================

class Pt2d::_Internal {
 public:
};

Pt2d::Pt2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:file_importer.Pt2d)
}
Pt2d::Pt2d(const Pt2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pt2d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:file_importer.Pt2d)
}

inline void Pt2d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pt2d::~Pt2d() {
  // @@protoc_insertion_point(destructor:file_importer.Pt2d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pt2d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pt2d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pt2d::Clear() {
// @@protoc_insertion_point(message_clear_start:file_importer.Pt2d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pt2d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pt2d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:file_importer.Pt2d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:file_importer.Pt2d)
  return target;
}

size_t Pt2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:file_importer.Pt2d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pt2d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pt2d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pt2d::GetClassData() const { return &_class_data_; }


void Pt2d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pt2d*>(&to_msg);
  auto& from = static_cast<const Pt2d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:file_importer.Pt2d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pt2d::CopyFrom(const Pt2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:file_importer.Pt2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pt2d::IsInitialized() const {
  return true;
}

void Pt2d::InternalSwap(Pt2d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pt2d, _impl_.y_)
      + sizeof(Pt2d::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Pt2d, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pt2d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_5fimporter_2eproto_getter, &descriptor_table_file_5fimporter_2eproto_once,
      file_level_metadata_file_5fimporter_2eproto[1]);
}

// ===================================================================

class ImportFileRequest::_Internal {
 public:
};

ImportFileRequest::ImportFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:file_importer.ImportFileRequest)
}
ImportFileRequest::ImportFileRequest(const ImportFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImportFileRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filepath().empty()) {
    _this->_impl_.filepath_.Set(from._internal_filepath(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:file_importer.ImportFileRequest)
}

inline void ImportFileRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImportFileRequest::~ImportFileRequest() {
  // @@protoc_insertion_point(destructor:file_importer.ImportFileRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImportFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filepath_.Destroy();
}

void ImportFileRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImportFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:file_importer.ImportFileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filepath_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportFileRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "file_importer.ImportFileRequest.filePath"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportFileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:file_importer.ImportFileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filePath = 1;
  if (!this->_internal_filepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "file_importer.ImportFileRequest.filePath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:file_importer.ImportFileRequest)
  return target;
}

size_t ImportFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:file_importer.ImportFileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filePath = 1;
  if (!this->_internal_filepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportFileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImportFileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportFileRequest::GetClassData() const { return &_class_data_; }


void ImportFileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImportFileRequest*>(&to_msg);
  auto& from = static_cast<const ImportFileRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:file_importer.ImportFileRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filepath().empty()) {
    _this->_internal_set_filepath(from._internal_filepath());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportFileRequest::CopyFrom(const ImportFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:file_importer.ImportFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportFileRequest::IsInitialized() const {
  return true;
}

void ImportFileRequest::InternalSwap(ImportFileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filepath_, lhs_arena,
      &other->_impl_.filepath_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportFileRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_5fimporter_2eproto_getter, &descriptor_table_file_5fimporter_2eproto_once,
      file_level_metadata_file_5fimporter_2eproto[2]);
}

// ===================================================================

class MeshData::_Internal {
 public:
};

MeshData::MeshData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:file_importer.MeshData)
}
MeshData::MeshData(const MeshData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MeshData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , decltype(_impl_.indices_){from._impl_.indices_}
    , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
    , decltype(_impl_.uvs_){from._impl_.uvs_}
    , decltype(_impl_.normals_){from._impl_.normals_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:file_importer.MeshData)
}

inline void MeshData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , decltype(_impl_.indices_){arena}
    , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
    , decltype(_impl_.uvs_){arena}
    , decltype(_impl_.normals_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MeshData::~MeshData() {
  // @@protoc_insertion_point(destructor:file_importer.MeshData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeshData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
  _impl_.indices_.~RepeatedField();
  _impl_.uvs_.~RepeatedPtrField();
  _impl_.normals_.~RepeatedPtrField();
}

void MeshData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeshData::Clear() {
// @@protoc_insertion_point(message_clear_start:file_importer.MeshData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _impl_.indices_.Clear();
  _impl_.uvs_.Clear();
  _impl_.normals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeshData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .file_importer.Pt3d points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .file_importer.Pt2d uvs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .file_importer.Pt3d normals = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_normals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeshData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:file_importer.MeshData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .file_importer.Pt3d points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 indices = 2;
  {
    int byte_size = _impl_._indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_indices(), byte_size, target);
    }
  }

  // repeated .file_importer.Pt2d uvs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uvs_size()); i < n; i++) {
    const auto& repfield = this->_internal_uvs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .file_importer.Pt3d normals = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_normals_size()); i < n; i++) {
    const auto& repfield = this->_internal_normals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:file_importer.MeshData)
  return target;
}

size_t MeshData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:file_importer.MeshData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .file_importer.Pt3d points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 indices = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .file_importer.Pt2d uvs = 3;
  total_size += 1UL * this->_internal_uvs_size();
  for (const auto& msg : this->_impl_.uvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .file_importer.Pt3d normals = 4;
  total_size += 1UL * this->_internal_normals_size();
  for (const auto& msg : this->_impl_.normals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeshData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MeshData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeshData::GetClassData() const { return &_class_data_; }


void MeshData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MeshData*>(&to_msg);
  auto& from = static_cast<const MeshData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:file_importer.MeshData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_impl_.indices_.MergeFrom(from._impl_.indices_);
  _this->_impl_.uvs_.MergeFrom(from._impl_.uvs_);
  _this->_impl_.normals_.MergeFrom(from._impl_.normals_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeshData::CopyFrom(const MeshData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:file_importer.MeshData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshData::IsInitialized() const {
  return true;
}

void MeshData::InternalSwap(MeshData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  _impl_.indices_.InternalSwap(&other->_impl_.indices_);
  _impl_.uvs_.InternalSwap(&other->_impl_.uvs_);
  _impl_.normals_.InternalSwap(&other->_impl_.normals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_5fimporter_2eproto_getter, &descriptor_table_file_5fimporter_2eproto_once,
      file_level_metadata_file_5fimporter_2eproto[3]);
}

// ===================================================================

class ImportFileResponse::_Internal {
 public:
};

ImportFileResponse::ImportFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:file_importer.ImportFileResponse)
}
ImportFileResponse::ImportFileResponse(const ImportFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImportFileResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.meshdataarr_){from._impl_.meshdataarr_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:file_importer.ImportFileResponse)
}

inline void ImportFileResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.meshdataarr_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImportFileResponse::~ImportFileResponse() {
  // @@protoc_insertion_point(destructor:file_importer.ImportFileResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImportFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.meshdataarr_.~RepeatedPtrField();
}

void ImportFileResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImportFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:file_importer.ImportFileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.meshdataarr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportFileResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .file_importer.MeshData meshDataArr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_meshdataarr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportFileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:file_importer.ImportFileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .file_importer.MeshData meshDataArr = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_meshdataarr_size()); i < n; i++) {
    const auto& repfield = this->_internal_meshdataarr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:file_importer.ImportFileResponse)
  return target;
}

size_t ImportFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:file_importer.ImportFileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .file_importer.MeshData meshDataArr = 1;
  total_size += 1UL * this->_internal_meshdataarr_size();
  for (const auto& msg : this->_impl_.meshdataarr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportFileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImportFileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportFileResponse::GetClassData() const { return &_class_data_; }


void ImportFileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImportFileResponse*>(&to_msg);
  auto& from = static_cast<const ImportFileResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:file_importer.ImportFileResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.meshdataarr_.MergeFrom(from._impl_.meshdataarr_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportFileResponse::CopyFrom(const ImportFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:file_importer.ImportFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportFileResponse::IsInitialized() const {
  return true;
}

void ImportFileResponse::InternalSwap(ImportFileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.meshdataarr_.InternalSwap(&other->_impl_.meshdataarr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportFileResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_5fimporter_2eproto_getter, &descriptor_table_file_5fimporter_2eproto_once,
      file_level_metadata_file_5fimporter_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace file_importer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::file_importer::Pt3d*
Arena::CreateMaybeMessage< ::file_importer::Pt3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::file_importer::Pt3d >(arena);
}
template<> PROTOBUF_NOINLINE ::file_importer::Pt2d*
Arena::CreateMaybeMessage< ::file_importer::Pt2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::file_importer::Pt2d >(arena);
}
template<> PROTOBUF_NOINLINE ::file_importer::ImportFileRequest*
Arena::CreateMaybeMessage< ::file_importer::ImportFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::file_importer::ImportFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::file_importer::MeshData*
Arena::CreateMaybeMessage< ::file_importer::MeshData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::file_importer::MeshData >(arena);
}
template<> PROTOBUF_NOINLINE ::file_importer::ImportFileResponse*
Arena::CreateMaybeMessage< ::file_importer::ImportFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::file_importer::ImportFileResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
